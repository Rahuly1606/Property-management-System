name: CI/CD Pipeline for Property Management System

# This workflow runs on any push to the 'master' branch
on:
  push:
    branches: [ "master" ]
  workflow_dispatch:  # Allow manual triggering of workflow

jobs:
  # Job to build and push the backend Docker image
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./Backend
          dockerfile: ./Backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/pms-backend:latest

  # Job to build and push the frontend Docker image
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './Frontend/package-lock.json'

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./Frontend
          dockerfile: ./Frontend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/pms-frontend:latest

  # Job to deploy the application to the AWS EC2 instance
  deploy:
    # This job depends on the build jobs finishing successfully
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            # Create a new docker-compose file for production
            echo "version: '3.8'

            services:
              mysql-db:
                image: mysql:8.0
                container_name: pms-mysql
                restart: unless-stopped
                environment:
                  MYSQL_ROOT_PASSWORD: \${{ secrets.DB_PASSWORD }}
                  MYSQL_DATABASE: pmsbackend
                ports:
                  - '3307:3306'
                volumes:
                  - mysql-data:/var/lib/mysql
                networks:
                  - pms-network
                healthcheck:
                  test: [\"CMD\", \"mysqladmin\", \"ping\", \"-h\", \"localhost\", \"-u\", \"root\", \"-p\${{ secrets.DB_PASSWORD }}\"]
                  interval: 10s
                  timeout: 5s
                  retries: 5

              backend:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/pms-backend:latest
                container_name: pms-backend
                restart: unless-stopped
                depends_on:
                  mysql-db:
                    condition: service_healthy
                environment:
                  SPRING_PROFILES_ACTIVE: docker
                  SPRING_DATASOURCE_URL: jdbc:mysql://mysql-db:3306/pmsbackend
                  SPRING_DATASOURCE_USERNAME: root
                  SPRING_DATASOURCE_PASSWORD: \${{ secrets.DB_PASSWORD }}
                ports:
                  - '8081:8080'
                networks:
                  - pms-network

              frontend:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/pms-frontend:latest
                container_name: pms-frontend
                restart: unless-stopped
                depends_on:
                  - backend
                ports:
                  - '80:80'
                networks:
                  - pms-network

            networks:
              pms-network:
                driver: bridge

            volumes:
              mysql-data: {}" > docker-compose-prod.yml

            # Pull the latest images from Docker Hub
            docker compose -f docker-compose-prod.yml pull
            
            # Stop the old containers and start the new ones
            docker compose -f docker-compose-prod.yml up -d
            
            # Remove any old, unused Docker images to save space
            docker image prune -af